---
description: 
globs: 
alwaysApply: false
---
# README_COMPONENT_ENDPOINT_SCHEMA.md

## Guide complet pour la configuration des schémas OpenAPI avec FastAPI

Ce document détaille la configuration correcte des schémas Pydantic et leur intégration avec OpenAPI dans une application FastAPI pour assurer une documentation Swagger complète et fonctionnelle.

## Table des matières

- [README\_COMPONENT\_ENDPOINT\_SCHEMA.md](mdc:#readme_component_endpoint_schemamd)
  - [Guide complet pour la configuration des schémas OpenAPI avec FastAPI](mdc:#guide-complet-pour-la-configuration-des-schémas-openapi-avec-fastapi)
  - [Table des matières](mdc:#table-des-matières)
  - [Introduction et contexte](mdc:#introduction-et-contexte)
  - [Structure du projet](mdc:#structure-du-projet)
  - [Définition des schémas Pydantic](mdc:#définition-des-schémas-pydantic)
    - [Bonnes pratiques pour les schémas](mdc:#bonnes-pratiques-pour-les-schémas)
    - [Configuration des exemples](mdc:#configuration-des-exemples)
    - [Validation des données](mdc:#validation-des-données)
  - [Modèles ORM SQLAlchemy](mdc:#modèles-orm-sqlalchemy)
    - [Relation avec les schémas Pydantic](mdc:#relation-avec-les-schémas-pydantic)
    - [Conversion entre ORM et Pydantic](mdc:#conversion-entre-orm-et-pydantic)
  - [Configuration des endpoints FastAPI](mdc:#configuration-des-endpoints-fastapi)
    - [Décorateurs et paramètres essentiels](mdc:#décorateurs-et-paramètres-essentiels)
    - [Documentation des réponses](mdc:#documentation-des-réponses)
  - [Personnalisation du schéma OpenAPI](mdc:#personnalisation-du-schéma-openapi)
    - [Fonction custom\_openapi](mdc:#fonction-custom_openapi)
    - [Définition manuelle des schémas (suite)](mdc:#définition-manuelle-des-schémas-suite)
  - [Résolution des problèmes courants](mdc:#résolution-des-problèmes-courants)
    - [Erreurs de référence aux schémas](mdc:#erreurs-de-référence-aux-schémas)
    - [Schémas manquants dans la documentation](mdc:#schémas-manquants-dans-la-documentation)
    - [Problèmes avec les versions de Pydantic](mdc:#problèmes-avec-les-versions-de-pydantic)
  - [Organisation avancée avec les routers](mdc:#organisation-avancée-avec-les-routers)
  - [Tests et validation](mdc:#tests-et-validation)
    - [Tests des endpoints](mdc:#tests-des-endpoints)
    - [Validation de la documentation OpenAPI](mdc:#validation-de-la-documentation-openapi)
  - [Conclusion](mdc:#conclusion)
    - [Références utiles](mdc:#références-utiles)

## Introduction et contexte

FastAPI utilise Pydantic pour la validation des données et génère automatiquement la documentation OpenAPI (Swagger) à partir des modèles Pydantic et des définitions d'endpoints. Cependant, des problèmes peuvent survenir dans la génération de cette documentation, notamment :

- Les références aux schémas Pydantic ne sont pas correctement résolues
- Les exemples et descriptions ne s'affichent pas dans l'interface Swagger
- Les formulaires pour tester les endpoints sont incomplets ou manquants
- Les réponses ne sont pas correctement documentées

Ce guide explique comment configurer correctement tous ces éléments pour obtenir une documentation complète et fonctionnelle.

## Structure du projet

Une structure de projet bien organisée facilite la maintenance et la compréhension du code. Voici une structure recommandée pour une application FastAPI :

```
backend/
├── app/
│   ├── api/
│   │   ├── endpoints/
│   │   │   ├── __init__.py
│   │   │   ├── users.py
│   │   │   └── ...
│   │   ├── __init__.py
│   │   └── router.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py
│   │   └── security.py
│   ├── models/
│   │   ├── __init__.py
│   │   ├── base.py
│   │   └── user.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   └── user.py
│   ├── services/
│   │   ├── __init__.py
│   │   └── ...
│   ├── __init__.py
│   ├── database.py
│   └── main.py
├── migrations/
├── static/
└── tests/
```

Important : assurez-vous que chaque répertoire contient un fichier `__init__.py`, même s'il est vide, pour permettre les imports Python.

## Définition des schémas Pydantic

Les schémas Pydantic définissent la structure des données entrantes et sortantes de votre API.

### Bonnes pratiques pour les schémas

Créez des schémas distincts pour les différentes opérations :

```python
# app/schemas/user.py
from pydantic import BaseModel, EmailStr, Field
from typing import Optional
from uuid import UUID
from datetime import datetime

# Schéma pour la création d'un utilisateur
class UserCreate(BaseModel):
    username: str = Field(
        ..., 
        min_length=3, 
        max_length=50, 
        description="Nom d'utilisateur unique", 
        example="musicien2025"
    )
    email: EmailStr = Field(
        ..., 
        description="Adresse email valide", 
        example="musicien@example.com"
    )
    password: str = Field(
        ..., 
        min_length=8, 
        description="Mot de passe (minimum 8 caractères)", 
        example="MotDePasse123!"
    )

# Schéma pour la réponse à la création d'un utilisateur
class UserResponse(BaseModel):
    message: str = Field(
        ..., 
        description="Message de confirmation", 
        example="Utilisateur créé avec succès"
    )
    user_id: UUID = Field(
        ..., 
        description="Identifiant unique de l'utilisateur",
        example="83e89dc4-b40d-4083-a0b2-1e57bc56c032"
    )
    
    class Config:
        from_attributes = True  # Remplace orm_mode=True dans Pydantic v2
```

### Configuration des exemples

Il existe trois manières de définir des exemples dans vos schémas :

1. **Via l'attribut `Field`** (recommandé pour la clarté) :

```python
username: str = Field(..., example="musicien2025")
```

2. **Via `Config.json_schema_extra`** (utile pour des exemples complets) :

```python
class Config:
    json_schema_extra = {
        "example": {
            "username": "musicien2025",
            "email": "musicien@example.com",
            "password": "MotDePasse123!"
        }
    }
```

3. **Via les paramètres de l'endpoint** (utile pour des cas spécifiques) :

```python
@app.post(
    "/register",
    responses={
        201: {
            "description": "Utilisateur créé avec succès",
            "content": {
                "application/json": {
                    "example": {
                        "message": "Utilisateur créé avec succès",
                        "user_id": "83e89dc4-b40d-4083-a0b2-1e57bc56c032"
                    }
                }
            }
        }
    }
)
```

### Validation des données

Utilisez les validateurs Pydantic pour assurer la qualité des données :

```python
from pydantic import validator

class UserCreate(BaseModel):
    # ... autres champs
    
    @validator('password')
    def password_strength(cls, v):
        if len(v) < 8:
            raise ValueError('Le mot de passe doit contenir au moins 8 caractères')
        if not any(char.isdigit() for char in v):
            raise ValueError('Le mot de passe doit contenir au moins un chiffre')
        if not any(char.isupper() for char in v):
            raise ValueError('Le mot de passe doit contenir au moins une majuscule')
        return v
```

## Modèles ORM SQLAlchemy

Les modèles ORM définissent la structure de vos tables de base de données.

```python
# app/models/user.py
from sqlalchemy import Column, String, DateTime, Boolean
from sqlalchemy.dialects.postgresql import UUID
import uuid
from datetime import datetime
from app.models.base import Base

class User(Base):
    __tablename__ = "users"

    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    username = Column(String, unique=True, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password_hash = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    is_active = Column(Boolean, default=True)
```

### Relation avec les schémas Pydantic

Les modèles ORM et les schémas Pydantic sont deux concepts distincts :
- Les modèles ORM représentent les données dans la base de données
- Les schémas Pydantic représentent les données dans l'API

### Conversion entre ORM et Pydantic

Pour convertir des instances ORM en modèles Pydantic, utilisez `from_attributes = True` (anciennement `orm_mode = True` dans Pydantic v1) :

```python
class UserInDB(BaseModel):
    id: UUID
    username: str
    email: EmailStr
    created_at: datetime
    is_active: bool
    
    class Config:
        from_attributes = True  # Permet de créer une instance à partir d'un modèle ORM
```

Puis dans votre code :

```python
user_db = db.query(User).filter(User.id == user_id).first()
user_response = UserInDB.model_validate(user_db)  # Pour Pydantic v2
# ou pour Pydantic v1 : user_response = UserInDB.from_orm(user_db)
```

## Configuration des endpoints FastAPI

### Décorateurs et paramètres essentiels

Pour une documentation complète de l'endpoint, utilisez tous les paramètres disponibles :

```python
@app.post(
    "/register", 
    status_code=status.HTTP_201_CREATED, 
    response_model=UserResponse,
    summary="Créer un nouveau compte utilisateur",
    description="Crée un nouveau compte utilisateur avec un nom d'utilisateur unique, une adresse email et un mot de passe.",
    responses={
         201: {"description": "Utilisateur créé avec succès", "model": UserResponse},
         400: {"description": "Nom d'utilisateur ou email déjà utilisé"},
         422: {"description": "Validation échouée - données invalides"}
     },
     tags=["Utilisateurs"]
)
async def register(user: UserCreate, db: Session = Depends(get_db)) -> UserResponse:
    """
    Crée un nouveau compte utilisateur dans le système.
    
    - **username**: Nom d'utilisateur unique
    - **email**: Adresse email valide et unique
    - **password**: Mot de passe sécurisé
    
    Retourne un message de confirmation et l'identifiant de l'utilisateur créé.
    """
    # Implémentation...
```

### Documentation des réponses

Le paramètre `responses` est crucial pour documenter toutes les réponses possibles :

```python
responses={
    201: {
        "description": "Utilisateur créé avec succès",
        "model": UserResponse,
        "content": {
            "application/json": {
                "example": {"message": "Utilisateur créé avec succès", "user_id": "83e89dc4-b40d-4083-a0b2-1e57bc56c032"}
            }
        }
    },
    400: {
        "description": "Nom d'utilisateur ou email déjà utilisé",
        "content": {
            "application/json": {
                "example": {"detail": "Le nom d'utilisateur ou l'email est déjà utilisé."}
            }
        }
    },
    422: {
        "description": "Validation échouée - données invalides",
        "content": {
            "application/json": {
                "example": {"detail": [{"loc": ["body", "username"], "msg": "field required", "type": "value_error.missing"}]}
            }
        }
    }
}
```

## Personnalisation du schéma OpenAPI

### Fonction custom_openapi

La fonction `custom_openapi` permet de personnaliser le schéma OpenAPI généré par FastAPI :

```python
def custom_openapi() -> Dict[str, Any]:
    """
    Personnalisation du schéma OpenAPI avec des informations supplémentaires.
    """
    schema = getattr(app, "openapi_schema", None)
    if schema is not None:
        assert isinstance(schema, Dict)
        return dict(schema)

    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
        tags=app.openapi_tags,
    )

    # Ajout de la version OpenAPI
    openapi_schema["openapi"] = "3.0.2"

    # Personnalisation du schéma
    openapi_schema["info"]["x-logo"] = {
        "url": "/static/logo.png",
        "backgroundColor": "#FFFFFF",
        "altText": "Mobile Musician Logo",
    }

    # S'assurer que la section components existe
    if "components" not in openapi_schema:
        openapi_schema["components"] = {}
    
    # Ajouter les schémas explicitement pour résoudre le problème de référence
    if "schemas" not in openapi_schema["components"]:
        openapi_schema["components"]["schemas"] = {}
    
    # Définir manuellement les schémas
    openapi_schema["components"]["schemas"]["UserCreate"] = {
        "title": "UserCreate",
        "type": "object",
        "properties": {
            "username": {"title": "Username", "type": "string", "example": "musicien2025"},
            "email": {"title": "Email", "type": "string", "format": "email", "example": "musicien@example.com"},
            "password": {"title": "Password", "type": "string", "example": "MotDePasse123!"}
        },
        "required": ["username", "email", "password"]
    }
    
    openapi_schema["components"]["schemas"]["UserResponse"] = {
        "title": "UserResponse",
        "type": "object",
        "properties": {
            "message": {"title": "Message", "type": "string", "example": "Utilisateur créé avec succès"},
            "user_id": {"title": "User ID", "type": "string", "format": "uuid", "example": "83e89dc4-b40d-4083-a0b2-1e57bc56c032"}
        },
        "required": ["message", "user_id"]
    }
    
    # Ajout des composants de sécurité
    openapi_schema["components"]["securitySchemes"] = {
        "bearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "Entrez votre token JWT ici",
        }
    }
    
    openapi_schema["components"]["responses"] = {
        "UnauthorizedError": {"description": "Token d'accès manquant ou invalide"}
    }

    # Sécurité globale
    openapi_schema["security"] = [{"bearerAuth": []}]

    app.openapi_schema = openapi_schema
    return openapi_schema

# Assigner la fonction personnalisée
app.openapi = custom_openapi  # type: ignore
```

### Définition manuelle des schémas (suite)

Si la génération automatique des schémas échoue, la définition manuelle dans `custom_openapi` est une solution fiable. Voici comment définir correctement un schéma complet :

```python
openapi_schema["components"]["schemas"]["UserCreate"] = {
    "title": "UserCreate",
    "type": "object",
    "properties": {
        "username": {
            "title": "Username", 
            "type": "string", 
            "description": "Nom d'utilisateur unique (3-50 caractères)",
            "minLength": 3,
            "maxLength": 50,
            "example": "musicien2025"
        },
        "email": {
            "title": "Email", 
            "type": "string", 
            "format": "email", 
            "description": "Adresse email valide",
            "example": "musicien@example.com"
        },
        "password": {
            "title": "Password", 
            "type": "string", 
            "description": "Mot de passe sécurisé (min. 8 caractères)",
            "minLength": 8,
            "format": "password",
            "example": "MotDePasse123!"
        }
    },
    "required": ["username", "email", "password"]
}
```

Pour des schémas plus complexes, incluez des définitions pour les objets imbriqués :

```python
openapi_schema["components"]["schemas"]["UserWithProfile"] = {
    "title": "UserWithProfile",
    "type": "object",
    "properties": {
        "id": {"title": "ID", "type": "string", "format": "uuid"},
        "username": {"title": "Username", "type": "string"},
        "email": {"title": "Email", "type": "string", "format": "email"},
        "profile": {
            "title": "Profile",
            "type": "object",
            "properties": {
                "full_name": {"title": "Full Name", "type": "string"},
                "bio": {"title": "Biography", "type": "string"},
                "instruments": {
                    "title": "Instruments",
                    "type": "array",
                    "items": {"type": "string"}
                }
            }
        }
    }
}
```

## Résolution des problèmes courants

### Erreurs de référence aux schémas

Le message d'erreur `Could not resolve reference: Could not resolve pointer: /components/schemas/UserCreate does not exist in document` indique que FastAPI ne peut pas trouver la définition du schéma.

**Solutions :**

1. **Vérifiez les imports** : Assurez-vous que vos schémas sont correctement importés dans le fichier où ils sont utilisés.

```python
# Imports explicites
from app.schemas.user import UserCreate, UserResponse
```

2. **Exportez vos schémas dans `__init__.py`** : 

```python
# app/schemas/__init__.py
from app.schemas.user import UserCreate, UserResponse

__all__ = ["UserCreate", "UserResponse"]
```

3. **Définissez manuellement les schémas** dans `custom_openapi` comme montré précédemment.

4. **Utilisez des références relatives au lieu de chemins absolus** :

```python
# Au lieu de
response_model=UserResponse

# Essayez
response_model=schemas.user.UserResponse
```

### Schémas manquants dans la documentation

Si vos schémas n'apparaissent pas correctement dans la documentation Swagger :

1. **Vérifiez la configuration du paramètre `response_model`** :

```python
@app.post("/register", response_model=UserResponse)
```

2. **Ajoutez des exemples explicites** avec `Field` ou `json_schema_extra`.

3. **Utilisez le paramètre `responses`** pour détailler les différentes réponses possibles.

4. **Redémarrez votre serveur** pour s'assurer que les modifications sont prises en compte.

### Problèmes avec les versions de Pydantic

Pydantic v2 a introduit plusieurs changements par rapport à v1 :

1. **Changement de `orm_mode` à `from_attributes`** :

```python
# Pydantic v1
class Config:
    orm_mode = True

# Pydantic v2
class Config:
    from_attributes = True
```

2. **Changement dans la manière de créer des modèles à partir d'ORM** :

```python
# Pydantic v1
user_response = UserInDB.from_orm(user_db)

# Pydantic v2
user_response = UserInDB.model_validate(user_db)
```

3. **Utilisation de Model.model_config au lieu de Config interne** :

```python
# Pydantic v1
class UserBase(BaseModel):
    class Config:
        schema_extra = {...}

# Pydantic v2
class UserBase(BaseModel):
    model_config = {
        "json_schema_extra": {...}
    }
```

## Organisation avancée avec les routers

Pour un projet plus grand, organisez vos endpoints avec des routers FastAPI :

```python
# app/api/endpoints/users.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from app.schemas.user import UserCreate, UserResponse
from app.models.user import User
from app.database import get_db
from app.core.security import get_password_hash

router = APIRouter()

@router.post(
    "/register",
    response_model=UserResponse,
    status_code=status.HTTP_201_CREATED,
    # ... autres paramètres
)
async def register(user: UserCreate, db: Session = Depends(get_db)):
    # Implémentation...
```

Puis dans le fichier principal :

```python
# app/main.py
from fastapi import FastAPI
from app.api.endpoints import users

app = FastAPI(title="Mobile Musician API", ...)

# Inclure les routers
app.include_router(users.router, prefix="/api/v1", tags=["Utilisateurs"])
```

Avantages des routers :
- Organisation modulaire du code
- Réutilisation des préfixes et tags
- Séparation des préoccupations
- Tests plus faciles à écrire

## Tests et validation

Il est crucial de tester que vos endpoints fonctionnent correctement et que la documentation est généré comme attendu.

### Tests des endpoints

```python
# tests/api/test_users.py
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_register_user():
    response = client.post(
        "/register",
        json={
            "username": "testuser",
            "email": "testuser@example.com",
            "password": "TestPassword123!"
        }
    )
    assert response.status_code == 201
    data = response.json()
    assert "user_id" in data
    assert "message" in data
    assert data["message"] == "Utilisateur créé avec succès"
```

### Validation de la documentation OpenAPI

```python
def test_openapi_schema():
    response = client.get("/openapi.json")
    assert response.status_code == 200
    schema = response.json()
    
    # Vérifier que les schémas sont présents
    assert "components" in schema
    assert "schemas" in schema["components"]
    assert "UserCreate" in schema["components"]["schemas"]
    assert "UserResponse" in schema["components"]["schemas"]
    
    # Vérifier les propriétés du schéma UserCreate
    user_create = schema["components"]["schemas"]["UserCreate"]
    assert "properties" in user_create
    assert "username" in user_create["properties"]
    assert "email" in user_create["properties"]
    assert "password" in user_create["properties"]
```

## Conclusion

La configuration correcte des schémas OpenAPI avec FastAPI nécessite une attention particulière à plusieurs éléments :

1. **Structure du projet** bien organisée avec des imports clairs
2. **Schémas Pydantic** complets avec descriptions, validations et exemples
3. **Documentation des endpoints** détaillée avec tous les paramètres possibles
4. **Personnalisation du schéma OpenAPI** si nécessaire
5. **Tests** pour s'assurer que tout fonctionne correctement

En suivant ces recommandations, vous éviterez les erreurs courantes et obtiendrez une documentation Swagger complète et fonctionnelle pour votre API FastAPI.

### Références utiles

- [Documentation officielle FastAPI sur les schémas](mdc:https:/fastapi.tiangolo.com/tutorial/schema-extra-example)
- [Documentation OpenAPI](mdc:https:/swagger.io/docs/specification/about)
- [Documentation Pydantic](mdc:https:/docs.pydantic.dev)
- [Guide de migration de Pydantic v1 à v2](mdc:https:/docs.pydantic.dev/latest/migration)

Avec ces informations, vous devriez pouvoir éviter les erreurs de schéma OpenAPI et profiter pleinement des capacités de documentation automatique de FastAPI.
